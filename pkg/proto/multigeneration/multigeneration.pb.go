// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: pkg/proto/multigeneration/multigeneration.proto

package multigeneration

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MultiGenReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response bool `protobuf:"varint,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *MultiGenReply) Reset() {
	*x = MultiGenReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_multigeneration_multigeneration_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiGenReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiGenReply) ProtoMessage() {}

func (x *MultiGenReply) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_multigeneration_multigeneration_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiGenReply.ProtoReflect.Descriptor instead.
func (*MultiGenReply) Descriptor() ([]byte, []int) {
	return file_pkg_proto_multigeneration_multigeneration_proto_rawDescGZIP(), []int{0}
}

func (x *MultiGenReply) GetResponse() bool {
	if x != nil {
		return x.Response
	}
	return false
}

var File_pkg_proto_multigeneration_multigeneration_proto protoreflect.FileDescriptor

var file_pkg_proto_multigeneration_multigeneration_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x19, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2b, 0x0a, 0x0d, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x47, 0x65, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xc0, 0x02, 0x0a, 0x20, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x65, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x49, 0x66, 0x57, 0x61, 0x6e, 0x74, 0x73, 0x54, 0x6f, 0x52, 0x6f, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x28, 0x2e, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x62, 0x61, 0x72, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x47, 0x65, 0x6e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x43, 0x0a, 0x11, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x6f,
	0x74, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x11, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3a, 0x0a,
	0x08, 0x44, 0x6f, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x61, 0x72,
	0x6e, 0x2f, 0x62, 0x62, 0x2d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_proto_multigeneration_multigeneration_proto_rawDescOnce sync.Once
	file_pkg_proto_multigeneration_multigeneration_proto_rawDescData = file_pkg_proto_multigeneration_multigeneration_proto_rawDesc
)

func file_pkg_proto_multigeneration_multigeneration_proto_rawDescGZIP() []byte {
	file_pkg_proto_multigeneration_multigeneration_proto_rawDescOnce.Do(func() {
		file_pkg_proto_multigeneration_multigeneration_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_proto_multigeneration_multigeneration_proto_rawDescData)
	})
	return file_pkg_proto_multigeneration_multigeneration_proto_rawDescData
}

var file_pkg_proto_multigeneration_multigeneration_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_pkg_proto_multigeneration_multigeneration_proto_goTypes = []interface{}{
	(*MultiGenReply)(nil), // 0: buildbarn.multigeneration.MultiGenReply
	(*emptypb.Empty)(nil), // 1: google.protobuf.Empty
}
var file_pkg_proto_multigeneration_multigeneration_proto_depIdxs = []int32{
	1, // 0: buildbarn.multigeneration.ShardedMultiGenerationController.GetIfWantsToRotate:input_type -> google.protobuf.Empty
	1, // 1: buildbarn.multigeneration.ShardedMultiGenerationController.AcquireRotateLock:input_type -> google.protobuf.Empty
	1, // 2: buildbarn.multigeneration.ShardedMultiGenerationController.ReleaseRotateLock:input_type -> google.protobuf.Empty
	1, // 3: buildbarn.multigeneration.ShardedMultiGenerationController.DoRotate:input_type -> google.protobuf.Empty
	0, // 4: buildbarn.multigeneration.ShardedMultiGenerationController.GetIfWantsToRotate:output_type -> buildbarn.multigeneration.MultiGenReply
	1, // 5: buildbarn.multigeneration.ShardedMultiGenerationController.AcquireRotateLock:output_type -> google.protobuf.Empty
	1, // 6: buildbarn.multigeneration.ShardedMultiGenerationController.ReleaseRotateLock:output_type -> google.protobuf.Empty
	1, // 7: buildbarn.multigeneration.ShardedMultiGenerationController.DoRotate:output_type -> google.protobuf.Empty
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_pkg_proto_multigeneration_multigeneration_proto_init() }
func file_pkg_proto_multigeneration_multigeneration_proto_init() {
	if File_pkg_proto_multigeneration_multigeneration_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_proto_multigeneration_multigeneration_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiGenReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_proto_multigeneration_multigeneration_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_proto_multigeneration_multigeneration_proto_goTypes,
		DependencyIndexes: file_pkg_proto_multigeneration_multigeneration_proto_depIdxs,
		MessageInfos:      file_pkg_proto_multigeneration_multigeneration_proto_msgTypes,
	}.Build()
	File_pkg_proto_multigeneration_multigeneration_proto = out.File
	file_pkg_proto_multigeneration_multigeneration_proto_rawDesc = nil
	file_pkg_proto_multigeneration_multigeneration_proto_goTypes = nil
	file_pkg_proto_multigeneration_multigeneration_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ShardedMultiGenerationControllerClient is the client API for ShardedMultiGenerationController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ShardedMultiGenerationControllerClient interface {
	GetIfWantsToRotate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MultiGenReply, error)
	AcquireRotateLock(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReleaseRotateLock(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DoRotate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type shardedMultiGenerationControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewShardedMultiGenerationControllerClient(cc grpc.ClientConnInterface) ShardedMultiGenerationControllerClient {
	return &shardedMultiGenerationControllerClient{cc}
}

func (c *shardedMultiGenerationControllerClient) GetIfWantsToRotate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MultiGenReply, error) {
	out := new(MultiGenReply)
	err := c.cc.Invoke(ctx, "/buildbarn.multigeneration.ShardedMultiGenerationController/GetIfWantsToRotate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardedMultiGenerationControllerClient) AcquireRotateLock(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/buildbarn.multigeneration.ShardedMultiGenerationController/AcquireRotateLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardedMultiGenerationControllerClient) ReleaseRotateLock(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/buildbarn.multigeneration.ShardedMultiGenerationController/ReleaseRotateLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardedMultiGenerationControllerClient) DoRotate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/buildbarn.multigeneration.ShardedMultiGenerationController/DoRotate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShardedMultiGenerationControllerServer is the server API for ShardedMultiGenerationController service.
type ShardedMultiGenerationControllerServer interface {
	GetIfWantsToRotate(context.Context, *emptypb.Empty) (*MultiGenReply, error)
	AcquireRotateLock(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	ReleaseRotateLock(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	DoRotate(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
}

// UnimplementedShardedMultiGenerationControllerServer can be embedded to have forward compatible implementations.
type UnimplementedShardedMultiGenerationControllerServer struct {
}

func (*UnimplementedShardedMultiGenerationControllerServer) GetIfWantsToRotate(context.Context, *emptypb.Empty) (*MultiGenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIfWantsToRotate not implemented")
}
func (*UnimplementedShardedMultiGenerationControllerServer) AcquireRotateLock(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcquireRotateLock not implemented")
}
func (*UnimplementedShardedMultiGenerationControllerServer) ReleaseRotateLock(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseRotateLock not implemented")
}
func (*UnimplementedShardedMultiGenerationControllerServer) DoRotate(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoRotate not implemented")
}

func RegisterShardedMultiGenerationControllerServer(s grpc.ServiceRegistrar, srv ShardedMultiGenerationControllerServer) {
	s.RegisterService(&_ShardedMultiGenerationController_serviceDesc, srv)
}

func _ShardedMultiGenerationController_GetIfWantsToRotate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardedMultiGenerationControllerServer).GetIfWantsToRotate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildbarn.multigeneration.ShardedMultiGenerationController/GetIfWantsToRotate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardedMultiGenerationControllerServer).GetIfWantsToRotate(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardedMultiGenerationController_AcquireRotateLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardedMultiGenerationControllerServer).AcquireRotateLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildbarn.multigeneration.ShardedMultiGenerationController/AcquireRotateLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardedMultiGenerationControllerServer).AcquireRotateLock(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardedMultiGenerationController_ReleaseRotateLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardedMultiGenerationControllerServer).ReleaseRotateLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildbarn.multigeneration.ShardedMultiGenerationController/ReleaseRotateLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardedMultiGenerationControllerServer).ReleaseRotateLock(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardedMultiGenerationController_DoRotate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardedMultiGenerationControllerServer).DoRotate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildbarn.multigeneration.ShardedMultiGenerationController/DoRotate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardedMultiGenerationControllerServer).DoRotate(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _ShardedMultiGenerationController_serviceDesc = grpc.ServiceDesc{
	ServiceName: "buildbarn.multigeneration.ShardedMultiGenerationController",
	HandlerType: (*ShardedMultiGenerationControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIfWantsToRotate",
			Handler:    _ShardedMultiGenerationController_GetIfWantsToRotate_Handler,
		},
		{
			MethodName: "AcquireRotateLock",
			Handler:    _ShardedMultiGenerationController_AcquireRotateLock_Handler,
		},
		{
			MethodName: "ReleaseRotateLock",
			Handler:    _ShardedMultiGenerationController_ReleaseRotateLock_Handler,
		},
		{
			MethodName: "DoRotate",
			Handler:    _ShardedMultiGenerationController_DoRotate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/multigeneration/multigeneration.proto",
}
